;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice to, cell body, int value, int mode) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: InternalTransfer
;; Header: 0x178d4519
;; TLB: internal_transfer#178d4519 query_id:uint64 amount:coins from:address response_destination:address forward_ton_amount:coins forward_payload:remainder<slice> = InternalTransfer
;;

builder $InternalTransfer$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'from, v'response_destination, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $InternalTransfer$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $InternalTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, int, slice)) $InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(int query_id, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, from, response_destination, forward_ton_amount, forward_payload);
}

;;
;; Type: Burn
;; Header: 0x595f07bc
;; TLB: burn#595f07bc query_id:uint64 amount:coins response_destination:address custom_payload:Maybe ^cell = Burn
;;

builder $Burn$_store(builder build_0, (int, int, slice, cell) v) inline {
    var (v'query_id, v'amount, v'response_destination, v'custom_payload) = v;
    build_0 = store_uint(build_0, 1499400124, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    return build_0;
}

cell $Burn$_store_cell((int, int, slice, cell) v) inline {
    return $Burn$_store(begin_cell(), v).end_cell();
}

((int, int, slice, cell)) $Burn$_constructor_query_id_amount_response_destination_custom_payload(int query_id, int amount, slice response_destination, cell custom_payload) inline {
    return (query_id, amount, response_destination, custom_payload);
}

;;
;; Type: SellProduct
;; Header: 0xd42ae8a3
;; TLB: sell_product#d42ae8a3 productId:uint32 buyer:address referral:address amount:uint64 = SellProduct
;;

(slice, ((int, slice, slice, int))) $SellProduct$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3559581859);
    var v'productId = sc_0~load_uint(32);
    var v'buyer = sc_0~__tact_load_address();
    var v'referral = sc_0~__tact_load_address();
    var v'amount = sc_0~load_uint(64);
    return (sc_0, (v'productId, v'buyer, v'referral, v'amount));
}

;;
;; Type: AddProduct
;; Header: 0x32088cf4
;; TLB: add_product#32088cf4 productId:uint32 reward:uint64 quantity:uint64 = AddProduct
;;

(slice, ((int, int, int))) $AddProduct$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 839421172);
    var v'productId = sc_0~load_uint(32);
    var v'reward = sc_0~load_uint(64);
    var v'quantity = sc_0~load_uint(64);
    return (sc_0, (v'productId, v'reward, v'quantity));
}

;;
;; Type: RemoveProduct
;; Header: 0x181734c8
;; TLB: remove_product#181734c8 productId:uint32 = RemoveProduct
;;

(slice, ((int))) $RemoveProduct$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 404174024);
    var v'productId = sc_0~load_uint(32);
    return (sc_0, (v'productId));
}

;;
;; Type: SetServiceWallet
;; Header: 0x20fc90d0
;; TLB: set_service_wallet#20fc90d0 wallet:address = SetServiceWallet
;;

(slice, ((slice))) $SetServiceWallet$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 553423056);
    var v'wallet = sc_0~__tact_load_address();
    return (sc_0, (v'wallet));
}

;;
;; Type: Product
;; TLB: _ id:uint32 reward:uint64 quantity:uint64 = Product
;;

builder $Product$_store(builder build_0, (int, int, int) v) inline {
    var (v'id, v'reward, v'quantity) = v;
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_uint(v'reward, 64);
    build_0 = build_0.store_uint(v'quantity, 64);
    return build_0;
}

cell $Product$_store_cell((int, int, int) v) inline {
    return $Product$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $Product$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'id, int vvv'reward, int vvv'quantity) = __tact_tuple_destroy_3(v);
    return (vvv'id, vvv'reward, vvv'quantity);
}

cell $Product$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $Product$_store_cell($Product$_not_null(v));
}

(slice, ((int, int, int))) $Product$_load(slice sc_0) inline {
    var v'id = sc_0~load_uint(32);
    var v'reward = sc_0~load_uint(64);
    var v'quantity = sc_0~load_uint(64);
    return (sc_0, (v'id, v'reward, v'quantity));
}

tuple $Product$_as_optional((int, int, int) v) inline {
    var (v'id, v'reward, v'quantity) = v;
    return __tact_tuple_create_3(v'id, v'reward, v'quantity);
}

tuple $Product$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Product$_as_optional(sc~$Product$_load());
}

_ $Product$_get_quantity((int, int, int) v) inline {
    var (v'id, v'reward, v'quantity) = v;
    return v'quantity;
}

(int, int, int) $Product$_to_external(((int, int, int)) v) inline {
    var (v'id, v'reward, v'quantity) = v; 
    return (v'id, v'reward, v'quantity);
}

((int, int, int)) $Product$_constructor_id_reward_quantity(int id, int reward, int quantity) inline {
    return (id, reward, quantity);
}

;;
;; Type: RewardDistribution
;; TLB: _ burn:uint8 service:uint8 referral:uint8 buyer:uint8 = RewardDistribution
;;

builder $RewardDistribution$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'burn, v'service, v'referral, v'buyer) = v;
    build_0 = build_0.store_uint(v'burn, 8);
    build_0 = build_0.store_uint(v'service, 8);
    build_0 = build_0.store_uint(v'referral, 8);
    build_0 = build_0.store_uint(v'buyer, 8);
    return build_0;
}

(slice, ((int, int, int, int))) $RewardDistribution$_load(slice sc_0) inline {
    var v'burn = sc_0~load_uint(8);
    var v'service = sc_0~load_uint(8);
    var v'referral = sc_0~load_uint(8);
    var v'buyer = sc_0~load_uint(8);
    return (sc_0, (v'burn, v'service, v'referral, v'buyer));
}

((int, int, int, int)) $RewardDistribution$_constructor_burn_service_referral_buyer(int burn, int service, int referral, int buyer) inline {
    return (burn, service, referral, buyer);
}

;;
;; Type: TokenWallet
;;

builder $TokenWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'master) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    return build_0;
}

(cell, cell) $TokenWallet$_init_child(cell sys', slice $owner, slice $master) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: TokenWallet
    cell mine = __tact_dict_get_code(source, 56445);
    contracts = __tact_dict_set_code(contracts, 56445, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $TokenWallet$init$_store(b, ($owner, $master));
    return (mine, b.end_cell());
}

;;
;; Type: SellerContract
;;

builder $SellerContract$_store(builder build_0, (slice, cell, (int, int, int, int), int, int, slice, slice) v) inline {
    var (v'owner, v'products, (v'rewardDistribution'burn, v'rewardDistribution'service, v'rewardDistribution'referral, v'rewardDistribution'buyer), v'created, v'lastUpdated, v'serviceWallet, v'jettonMaster) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'products);
    build_0 = $RewardDistribution$_store(build_0, (v'rewardDistribution'burn, v'rewardDistribution'service, v'rewardDistribution'referral, v'rewardDistribution'buyer));
    build_0 = build_0.store_uint(v'created, 64);
    build_0 = build_0.store_uint(v'lastUpdated, 64);
    build_0 = __tact_store_address(build_0, v'serviceWallet);
    build_0 = __tact_store_address(build_0, v'jettonMaster);
    return build_0;
}

(slice, ((slice, cell, (int, int, int, int), int, int, slice, slice))) $SellerContract$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'products = sc_0~load_dict();
    var v'rewardDistribution = sc_0~$RewardDistribution$_load();
    var v'created = sc_0~load_uint(64);
    var v'lastUpdated = sc_0~load_uint(64);
    var v'serviceWallet = sc_0~__tact_load_address();
    var v'jettonMaster = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'products, v'rewardDistribution, v'created, v'lastUpdated, v'serviceWallet, v'jettonMaster));
}

(slice, ((slice, slice, slice, cell))) $SellerContract$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'serviceWallet = sc_0~__tact_load_address();
    var v'jettonMaster = sc_0~__tact_load_address();
    var v'random_tag = sc_0~load_ref();
    return (sc_0, (v'owner, v'serviceWallet, v'jettonMaster, v'random_tag));
}

(slice, cell, (int, int, int, int), int, int, slice, slice) $SellerContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SellerContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, slice serviceWallet, slice jettonMaster, cell random_tag) = $sc~$SellerContract$init$_load();
        $sc.end_parse();
        return $SellerContract$_contract_init(owner, serviceWallet, jettonMaster, random_tag);
    }
}

() $SellerContract$_contract_store((slice, cell, (int, int, int, int), int, int, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SellerContract$_store(b, v);
    set_data(b.end_cell());
}