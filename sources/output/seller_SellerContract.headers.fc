;;
;; Header files for SellerContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_uint_cell
(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_uint_cell
cell __tact_dict_get_uint_cell(cell d, int kl, int k) inline;

;; __tact_dict_min_uint_cell
(int, cell, int) __tact_dict_min_uint_cell(cell d, int kl) inline;

;; __tact_dict_next_uint_cell
(int, cell, int) __tact_dict_next_uint_cell(cell d, int kl, int pivot) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $InternalTransfer$_store
builder $InternalTransfer$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $InternalTransfer$_store_cell
cell $InternalTransfer$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $Burn$_store
builder $Burn$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $Burn$_store_cell
cell $Burn$_store_cell((int, int, slice, cell) v) inline;

;; $SellProduct$_load
(slice, ((int, slice, slice, int))) $SellProduct$_load(slice sc_0) inline;

;; $AddProduct$_load
(slice, ((int, int, int))) $AddProduct$_load(slice sc_0) inline;

;; $RemoveProduct$_load
(slice, ((int))) $RemoveProduct$_load(slice sc_0) inline;

;; $SetServiceWallet$_load
(slice, ((slice))) $SetServiceWallet$_load(slice sc_0) inline;

;; $Product$_store
builder $Product$_store(builder build_0, (int, int, int) v) inline;

;; $Product$_store_cell
cell $Product$_store_cell((int, int, int) v) inline;

;; $Product$_not_null
((int, int, int)) $Product$_not_null(tuple v) inline;

;; $Product$_store_opt
cell $Product$_store_opt(tuple v) inline;

;; $Product$_load
(slice, ((int, int, int))) $Product$_load(slice sc_0) inline;

;; $Product$_as_optional
tuple $Product$_as_optional((int, int, int) v) inline;

;; $Product$_load_opt
tuple $Product$_load_opt(cell cl) inline;

;; $RewardDistribution$_store
builder $RewardDistribution$_store(builder build_0, (int, int, int, int) v) inline;

;; $RewardDistribution$_load
(slice, ((int, int, int, int))) $RewardDistribution$_load(slice sc_0) inline;

;; $SellerContract$_store
builder $SellerContract$_store(builder build_0, (slice, cell, (int, int, int, int), int, int, slice, slice) v) inline;

;; $SellerContract$_load
(slice, ((slice, cell, (int, int, int, int), int, int, slice, slice))) $SellerContract$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Product$_get_quantity
_ $Product$_get_quantity((int, int, int) v) inline;

;; $Product$_to_external
(int, int, int) $Product$_to_external(((int, int, int)) v) inline;

;; $TokenWallet$init$_store
builder $TokenWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $SellerContract$init$_load
(slice, ((slice, slice, slice, cell))) $SellerContract$init$_load(slice sc_0) inline;

;; $RewardDistribution$_constructor_burn_service_referral_buyer
((int, int, int, int)) $RewardDistribution$_constructor_burn_service_referral_buyer(int burn, int service, int referral, int buyer) inline;

;; $SellerContract$_contract_init
(slice, cell, (int, int, int, int), int, int, slice, slice) $SellerContract$_contract_init(slice $owner, slice $serviceWallet, slice $jettonMaster, cell $random_tag) impure inline_ref;

;; $SellerContract$_contract_load
(slice, cell, (int, int, int, int), int, int, slice, slice) $SellerContract$_contract_load() impure inline_ref;

;; $SellerContract$_contract_store
() $SellerContract$_contract_store((slice, cell, (int, int, int, int), int, int, slice, slice) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $TokenWallet$_init_child
(cell, cell) $TokenWallet$_init_child(cell sys', slice $owner, slice $master) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $SendParameters$_constructor_to_body_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice to, cell body, int value, int mode) inline;

;; $Burn$_constructor_query_id_amount_response_destination_custom_payload
((int, int, slice, cell)) $Burn$_constructor_query_id_amount_response_destination_custom_payload(int query_id, int amount, slice response_destination, cell custom_payload) inline;

;; $SellerContract$_fun_burn
((slice, cell, (int, int, int, int), int, int, slice, slice), ()) $SellerContract$_fun_burn((slice, cell, (int, int, int, int), int, int, slice, slice) $self, int $amount) impure inline_ref;

;; $SellerContract$_fun_getWalletAddress
((slice, cell, (int, int, int, int), int, int, slice, slice), slice) $SellerContract$_fun_getWalletAddress((slice, cell, (int, int, int, int), int, int, slice, slice) $self, slice $owner) impure inline_ref;

;; $InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload
((int, int, slice, slice, int, slice)) $InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(int query_id, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline;

;; $SellerContract$_fun_transfer
((slice, cell, (int, int, int, int), int, int, slice, slice), ()) $SellerContract$_fun_transfer((slice, cell, (int, int, int, int), int, int, slice, slice) $self, int $amount, slice $to) impure inline_ref;

;; $SellerContract$_fun_distributeRewards
((slice, cell, (int, int, int, int), int, int, slice, slice), ()) $SellerContract$_fun_distributeRewards((slice, cell, (int, int, int, int), int, int, slice, slice) $self, (int, int, int) $product, slice $buyer, slice $referral, slice $seller, int $amount) impure inline_ref;

;; $SellerContract$_fun_created
((slice, cell, (int, int, int, int), int, int, slice, slice), int) $SellerContract$_fun_created((slice, cell, (int, int, int, int), int, int, slice, slice) $self) impure inline_ref;

;; $SellerContract$_fun_lastUpdated
((slice, cell, (int, int, int, int), int, int, slice, slice), int) $SellerContract$_fun_lastUpdated((slice, cell, (int, int, int, int), int, int, slice, slice) $self) impure inline_ref;

;; $SellerContract$_fun_product
((slice, cell, (int, int, int, int), int, int, slice, slice), (int, int, int)) $SellerContract$_fun_product((slice, cell, (int, int, int, int), int, int, slice, slice) $self, int $productId) impure inline_ref;

;; $SellerContract$_fun_productIds
((slice, cell, (int, int, int, int), int, int, slice, slice), cell) $SellerContract$_fun_productIds((slice, cell, (int, int, int, int), int, int, slice, slice) $self) impure inline_ref;

;; $SellerContract$_fun_forward
((slice, cell, (int, int, int, int), int, int, slice, slice), ()) $SellerContract$_fun_forward((slice, cell, (int, int, int, int), int, int, slice, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $SellerContract$_fun_notify
((slice, cell, (int, int, int, int), int, int, slice, slice), ()) $SellerContract$_fun_notify((slice, cell, (int, int, int, int), int, int, slice, slice) $self, cell $body) impure inline;

;; $SellerContract$_fun_owner
((slice, cell, (int, int, int, int), int, int, slice, slice), slice) $SellerContract$_fun_owner((slice, cell, (int, int, int, int), int, int, slice, slice) $self) impure inline_ref;

;; $Product$_constructor_id_reward_quantity
((int, int, int)) $Product$_constructor_id_reward_quantity(int id, int reward, int quantity) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
